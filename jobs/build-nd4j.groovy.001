node('master') {
// node('ec2_x86_64') {
   tool name: 'M3', type: 'maven'
   def mvnHome
   mvnHome = tool 'M3'
  //  sh 'echo $PATH'

   stage('Preparation')    {
     checkout([$class: 'GitSCM',
       branches: [[name: '*/intropro']],
       doGenerateSubmoduleConfigurations: false,
       extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '$PROJECT'], [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true]],
       submoduleCfg: [],
       // userRemoteConfigs: [[url: 'git@github.com:$ACCOUNT/$PROJECT.git', credentialsId: 'cf9d8f84-28aa-42f0-85a2-0a695d17c85f']]])
       userRemoteConfigs: [[url: 'git@github.com:$ACCOUNT/$PROJECT.git', credentialsId: 'b0fc06e6-a23c-4886-a0c3-f53800a41663']]])

     checkout([$class: 'GitSCM',
       branches: [[name: '*/intropro']],
       doGenerateSubmoduleConfigurations: false,
       extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '$LIBPROJECT'], [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true]],
       submoduleCfg: [],
       // userRemoteConfigs: [[url: 'git@github.com:$ACCOUNT/libnd4j.git', credentialsId: 'cf9d8f84-28aa-42f0-85a2-0a695d17c85f']]])
       userRemoteConfigs: [[url: 'git@github.com:$ACCOUNT/libnd4j.git', credentialsId: 'b0fc06e6-a23c-4886-a0c3-f53800a41663']]])

     echo 'Setting up OpenBLAS'
     checkout([$class: 'GitSCM',
       branches: [[name: '*/master']],
       doGenerateSubmoduleConfigurations: false,
       //  extensions: [],
       extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: '$PRESETSDIR'], [$class: 'CloneOption', honorRefspec: true, noTags: true, reference: '', shallow: true]],
       submoduleCfg: [],
       userRemoteConfigs: [[url: 'https://github.com/bytedeco/javacpp-presets']]])

     dir("$PRESETSDIR") {
       sh "ls -al"
       // sh "bash cppbuild.sh install -platform $PLATFORM_NAME"
       }
   }

  //  stage('Codecheck') {
  //    echo 'Check $ACCOUNT/$PROJECT code with SonarQube'
  //  }

   stage('Build') {
     echo 'Releasing version $RELEASE_VERSION ($SNAPSHOT_VERSION) to repository $STAGING_REPOSITORY'
     echo 'Check if $RELEASE_VERSION has been released already'
     dir("$PROJECT") {
       def exitValue = sh (returnStdout: true, script: """git tag -l \"$PROJECT-$RELEASE_VERSION\"""")
       if (exitValue != '') {
          echo 'Error: Version $RELEASE_VERSION has already been released!'
       }
     }

     echo 'Build Native Operations'
     dir("$LIBPROJECT") {
       // sh ("git tag -l \"libnd4j-$RELEASE_VERSION\"")
       def check_tag = sh (returnStdout: true, script: """git tag -l \"$LIBPROJECT-$RELEASE_VERSION\"""")
         if (check_tag == '') {
             // input 'Pipeline has paused and needs your input before proceeding'
             sh "export TRICK_NVCC=YES && export LIBND4J_HOME=${WORKSPACE}/$LIBPROJECT && ./buildnativeoperations.sh -c cpu"
             // sh "export TRICK_NVCC=YES && export LIBND4J_HOME=${WORKSPACE}/$LIBPROJECT && ./buildnativeoperations.sh -c cuda -v 7.5"
             // sh "export TRICK_NVCC=YES && export LIBND4J_HOME=${WORKSPACE}/$LIBPROJECT && ./buildnativeoperations.sh -c cuda -v 8.0"
             //sh "git tag -a -m "libnd4j-$RELEASE_VERSION""
         }
     }

     echo 'Set Project Version'
     dir("$PROJECT") {
       sh ("'${mvnHome}/bin/mvn' versions:set -DallowSnapshots=true -DgenerateBackupPoms=false -DnewVersion=$RELEASE_VERSION")
       sh ("echo $RELEASE_VERSION && echo $PROJECT-$RELEASE_VERSION && echo $STAGING_REPOSITORY")
       //  sh ("ls -l")

       echo 'Maven Build, Package and Deploy'
       def check_repo = "$STAGING_REPOSITORY"
       // echo check_repo
         if (check_repo == '') {
           // sh ("ls -l")
           sh "./change-scala-versions.sh 2.10"
           sh "./change-cuda-versions.sh 7.5"
           sh ("'${mvnHome}/bin/mvn' clean deploy -Dgpg.executable=gpg2 -Dgpg.skip -DperformRelease -DskipTests -Denforcer.skip -DstagingRepositoryId=$STAGING_REPOSITORY")
         }
       }
     }
   step([$class: 'WsCleanup'])
}
